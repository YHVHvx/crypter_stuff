
/* cette fonction effectue le calcul
 mul1 x mul2 et le stock dans reg */

init(reg:registre,mul1:entier,mul2:entier)
{
  /* Ce registre ne sera pas libéré à la fin de la règle ! */
  lock(reg,dest);
  mov_reg_cst(reg,mul1);

  /* Ce registre ne sera pas libéré à la fin de la règle ! */
  lock(freereg0,compteur);
  mov_reg_cst(freereg0,mul2-1);


  lock(mul1,a_ajouter);
  
  /* declare un label sur le debut
  de la boucle */
  label0;
  lock(label0,debut_boucle);
}

ajoute()
{
   add_reg_cst(dest,a_ajouter);
}

dec_compteur()
{
  sub_reg_cst(compteur,1);
}

boucle()
{
  cmp_reg_zero(compteur);
  saut_nz(debut_boucle);
}



cmp_reg_zero(reg:registre)
{
10:
  {
    raz_registre(freereg0);
    cmp_reg_reg(freereg0,reg);
  }
10:
  {
    raz_registre(freereg0);
    cmp_reg_reg(reg,freereg0);
  }
1: DEFAUT
 {
  if(reg!=EBP)
  {
    write16(0xF883 | reg << 8);
    write8(0);
   }
   else
   {
     write16(0xFD83);
     write8(0);
   }
 }
}

cmp_reg_reg(reg1:registre,reg2:registre)
{
 1: DEFAUT
 {
   write16(0xC03B | reg1 <<11 | reg2 <<8);
 }
}


saut_nz(location:adresse)
{

1: DEFAUT
 {
   label0;
   /* Peut-on faire directement un jnz short ? */
   if(((location-label0-2) < 127) && (location-label0-2 > 0-128))
   {
     write8(0x75);
     write8(location-label0-2);
   }
   /* sinon on fait un jz qui saute au dessus d'un jmp */
   else
   {
     write8(0x74);
     write8(5);
     write8(0xE9);
     write32(location-label0-(5+2));
   }
 }
}



mov_reg_cst(reg:registre,cst:entier)
{
6:
  {
    mov_reg_cst(reg,rndint0);
    add_reg_cst(reg,cst-rndint0);
  }
6:
  {
    mov_reg_cst(reg,rndint0);
    sub_reg_cst(reg,rndint0-cst);
  }
1: DEFAUT
  {
    write8(0xB8|reg);
    write32(cst);
  }
}


add_reg_reg(regdest:registre,regsrc:registre)
{
1: DEFAUT
  {
    write16(0xC003 | regdest<<11 | regsrc<<8);
  }
}

add_reg_cst(reg:registre,cst:entier)
{
16:
  {
    mov_reg_cst(freereg0,cst);
    add_reg_reg(reg,freereg0);
  }
1: DEFAUT
  {
    if(reg==EAX)
    {
      write8(0x05);
    }
    else
    {
      write16(0xC081 | (reg << 8));
    }
    write32(cst);
  }
}


sub_reg_reg(regdest:registre,regsrc:registre)
{
1: DEFAUT
  {
    write16(0xC02B | regdest << 11 | regsrc << 8);
  }
}

sub_reg_cst(reg:registre,cst:entier)
{
16:
  {
    mov_reg_cst(freereg0,cst);
    sub_reg_reg(reg,freereg0);
  }
1: DEFAUT
  {
    if(reg==EAX)
    {
      write8(0x2D);
    }
    else
    {
      write16(0xE881 | reg<<8);
    }
    write32(cst);
  }
}



raz_registre(reg:registre)
{
5:
{
   mov_reg_cst(reg,0);
}
2:
  {
   write16(0xC033 | reg << 11 | reg << 8) ;   # xor reg,reg
  }
  
1: DEFAUT
  {
    write16(0xC02B | reg << 11 | reg << 8);   # sub reg,reg
  }
}
